{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/Layout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nconst Index = props => {\n  return __jsx(Layout, null, __jsx(\"h3\", {\n    className: \"jsx-3647322800\"\n  }, \"Fetch Sample\"), __jsx(\"ul\", {\n    className: \"jsx-3647322800\" + \" \" + \"items\"\n  }, props.shows.map(({\n    show\n  }) => __jsx(\"li\", {\n    key: show.id,\n    className: \"jsx-3647322800\" + \" \" + \"item\"\n  }, __jsx(Link, {\n    as: `/f/${show.id}`,\n    href: `/fetch/detail?id=${show.id}`\n  }, __jsx(\"a\", {\n    className: \"jsx-3647322800\" + \" \" + \"item-link\"\n  }, __jsx(\"img\", {\n    src: show.image.medium,\n    className: \"jsx-3647322800\"\n  }))), __jsx(Link, {\n    as: `/f/${show.id}`,\n    href: `/fetch/detail?id=${show.id}`\n  }, __jsx(\"a\", {\n    className: \"jsx-3647322800\" + \" \" + \"item-link\"\n  }, show.name))))), __jsx(_JSXStyle, {\n    id: \"3647322800\"\n  }, \".items.jsx-3647322800{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}.items.jsx-3647322800 .item.jsx-3647322800{width:30%;margin:0 0 50px 0;}.items.jsx-3647322800 .item.jsx-3647322800 img.jsx-3647322800{width:100%;}.items.jsx-3647322800 .item.jsx-3647322800 .item-link.jsx-3647322800{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;font-size:14px;margin:15px 0 0 0;}@media screen and (max-width:768px){}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpZGFpc3VrZS9uZXh0LWFwcC9oZWxsby1uZXh0L3BhZ2VzL2ZldGNoL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCd0IsQUFHa0MsQUFLSCxBQUlDLEFBR0UsVUFOSyxDQUl0QixpQkFIQSw4Q0FOa0MsQUFZZixlQUNHLGtCQUN0QixrRkFibUIseURBQ25CIiwiZmlsZSI6Ii9Vc2Vycy9tb3JpZGFpc3VrZS9uZXh0LWFwcC9oZWxsby1uZXh0L3BhZ2VzL2ZldGNoL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExheW91dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0xheW91dCc7XG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xuaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtdW5mZXRjaCc7XG5cbmNvbnN0IEluZGV4ID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPExheW91dD5cbiAgICAgICAgICAgIDxoMz5GZXRjaCBTYW1wbGU8L2gzPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIml0ZW1zXCI+XG4gICAgICAgICAgICAgICAge3Byb3BzLnNob3dzLm1hcCgoe3Nob3d9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJpdGVtXCIga2V5PXtzaG93LmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgYXM9e2AvZi8ke3Nob3cuaWR9YH0gaHJlZj17YC9mZXRjaC9kZXRhaWw/aWQ9JHtzaG93LmlkfWB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIml0ZW0tbGlua1wiPjxpbWcgc3JjPXtzaG93LmltYWdlLm1lZGl1bX0gLz48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayBhcz17YC9mLyR7c2hvdy5pZH1gfSBocmVmPXtgL2ZldGNoL2RldGFpbD9pZD0ke3Nob3cuaWR9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiaXRlbS1saW5rXCI+e3Nob3cubmFtZX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgICAgICAgIC5pdGVtcyB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuaXRlbXMgLml0ZW0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCA1MHB4IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC5pdGVtcyAuaXRlbSBpbWcge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLml0ZW1zIC5pdGVtIC5pdGVtLWxpbmsge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMTVweCAwIDAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgPC9MYXlvdXQ+XG4gICAgKTtcbn1cbkluZGV4LmdldEluaXRpYWxQcm9wcyA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkudHZtYXplLmNvbS9zZWFyY2gvc2hvd3M/cT1iYXRtYW4nKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzaG93czogZGF0YSxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZGV4OyJdfQ== */\\n/*@ sourceURL=/Users/moridaisuke/next-app/hello-next/pages/fetch/index.js */\"));\n};\n\nIndex.getInitialProps = async () => {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  return {\n    shows: data\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/moridaisuke/next-app/hello-next/pages/fetch/index.js"],"names":["Layout","Link","fetch","Index","props","shows","map","show","id","image","medium","name","getInitialProps","res","data","json"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,SACI,MAAC,MAAD,QACI;AAAA;AAAA,oBADJ,EAEI;AAAA,wCAAc;AAAd,KACKA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,CAAC;AAACC,IAAAA;AAAD,GAAD,KACb;AAAqB,IAAA,GAAG,EAAEA,IAAI,CAACC,EAA/B;AAAA,wCAAc;AAAd,KAEI,MAAC,IAAD;AAAM,IAAA,EAAE,EAAG,MAAKD,IAAI,CAACC,EAAG,EAAxB;AAA2B,IAAA,IAAI,EAAG,oBAAmBD,IAAI,CAACC,EAAG;AAA7D,KACI;AAAA,wCAAa;AAAb,KAAyB;AAAK,IAAA,GAAG,EAAED,IAAI,CAACE,KAAL,CAAWC,MAArB;AAAA;AAAA,IAAzB,CADJ,CAFJ,EAKI,MAAC,IAAD;AAAM,IAAA,EAAE,EAAG,MAAKH,IAAI,CAACC,EAAG,EAAxB;AAA2B,IAAA,IAAI,EAAG,oBAAmBD,IAAI,CAACC,EAAG;AAA7D,KACI;AAAA,wCAAa;AAAb,KAA0BD,IAAI,CAACI,IAA/B,CADJ,CALJ,CADH,CADL,CAFJ;AAAA;AAAA,y/GADJ;AAwCH,CAzCD;;AA0CAR,KAAK,CAACS,eAAN,GAAwB,YAAY;AAChC,QAAMC,GAAG,GAAG,MAAMX,KAAK,CAAC,8CAAD,CAAvB;AACA,QAAMY,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAO;AACHV,IAAAA,KAAK,EAAES;AADJ,GAAP;AAGH,CAND;;AAQA,eAAeX,KAAf","sourcesContent":["import Layout from '../../components/Layout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nconst Index = (props) => {\n    return (\n        <Layout>\n            <h3>Fetch Sample</h3>\n            <ul className=\"items\">\n                {props.shows.map(({show}) => (\n                    <li className=\"item\" key={show.id}>\n                        \n                        <Link as={`/f/${show.id}`} href={`/fetch/detail?id=${show.id}`}>\n                            <a className=\"item-link\"><img src={show.image.medium} /></a>\n                        </Link>\n                        <Link as={`/f/${show.id}`} href={`/fetch/detail?id=${show.id}`}>\n                            <a className=\"item-link\">{show.name}</a>\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n            <style jsx>{`\n                .items {\n                    display: flex;\n                    justify-content: space-between;\n                    flex-wrap: wrap;\n                }\n                .items .item {\n                    width: 30%;\n                    margin: 0 0 50px 0;\n                }\n                .items .item img {\n                    width: 100%;\n                }\n                .items .item .item-link {\n                    display: flex;\n                    font-size: 14px;\n                    margin: 15px 0 0 0;\n                }\n                @media screen and (max-width: 768px) {\n\n                }\n            `}</style>\n        </Layout>\n    );\n}\nIndex.getInitialProps = async () => {\n    const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n    const data = await res.json();\n    return {\n        shows: data,\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}